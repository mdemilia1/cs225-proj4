/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import GUI.Dialog.TaskDialog;
import javax.swing.*;
import BackEnd.EventSystem.Committee;
import BackEnd.EventSystem.Event;
import BackEnd.EventSystem.Task;
import BackEnd.EventSystem.TimeSchedule;
import BackEnd.ManagerSystem.MainManager;
import BackEnd.UserSystem.User;
import GUI.Dialog.BudgetDialog;
import GUI.Dialog.FindMemberDialog;
import GUI.Dialog.NewTaskDialog;
import GUI.Reportable.CommitteeReport;
import auth.AuthorizationException;

import java.awt.Color;
import java.awt.Component;
import java.util.Calendar;

/**
 *
 * @author Sid
 */
public class CommitteePanel extends javax.swing.JPanel {

    /**
     * Creates new form CommitteePanel
     */
    private MainManager manager;
    private DesignDefault dd;
    
    public CommitteePanel() {
        dd = DesignDefault.getInstance();
        initComponents();
        manager = MainManager.getInstance();
        MembersCellRenderer memberRenderer = new MembersCellRenderer();
        TasksCellRenderer taskRenderer = new TasksCellRenderer();
        memberList.setCellRenderer(memberRenderer);
        taskList.setCellRenderer(taskRenderer);
        this.setBackground(dd.getPanelBGColor());
        
    }

    public void resetView() {
        committeeHeadChangeButton.setVisible(true);
        budgetButton.setVisible(true);
        addToBudgetButton.setVisible(true);
        removeMemberFromBudgetButton.setVisible(true);
        addMemberButton.setVisible(true);
        removeMemberButton.setVisible(true);
        addTaskButton.setVisible(true);
        removeTaskButton.setVisible(true);
    }
    
    public void setCommitteeMemberView() {
        committeeHeadChangeButton.setVisible(false);
        budgetButton.setVisible(false);
        addToBudgetButton.setVisible(false);
        removeMemberFromBudgetButton.setVisible(false);
        addMemberButton.setVisible(false);
        removeMemberButton.setVisible(false);
        addTaskButton.setVisible(false);
        removeTaskButton.setVisible(false);
    }
    
    public void setBudgetAccessMemberView() {
        setCommitteeMemberView();
        budgetButton.setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        removeTaskLabel = new javax.swing.JLabel();
        addTaskLabel = new javax.swing.JLabel();
        removeMemberLabel = new javax.swing.JLabel();
        addMemberLabel = new javax.swing.JLabel();
        removeBudgetAccessLabel = new javax.swing.JLabel();
        addBudgetAccessLabel = new javax.swing.JLabel();
        headerLabel = new javax.swing.JLabel();
        memberScrollPane = new javax.swing.JScrollPane();
        memberList = new javax.swing.JList();
        membersLabel = new javax.swing.JLabel();
        headLabel = new javax.swing.JLabel();
        headNameLabel = new javax.swing.JLabel();
        taskScrollPane = new javax.swing.JScrollPane();
        taskList = new javax.swing.JList();
        tasksLabel = new javax.swing.JLabel();
        taskProgressBar = new javax.swing.JProgressBar();
        budgetButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        committeeHeadChangeButton = new javax.swing.JButton();
        removeTaskButton = new javax.swing.JButton();
        addTaskButton = new javax.swing.JButton();
        addMemberButton = new javax.swing.JButton();
        removeMemberButton = new javax.swing.JButton();
        addToBudgetButton = new javax.swing.JButton();
        removeMemberFromBudgetButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();

        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    jLabel1MouseClicked(evt);
                }catch( AuthorizationException ignore ){}
            }
        });

        removeTaskLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    removeTaskLabelMouseClicked(evt);
                }catch (AuthorizationException ignore){}
            }
        });

        addTaskLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    addTaskLabelMouseClicked(evt);
                }catch (AuthorizationException ignore){}
            }
        });

        removeMemberLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    removeMemberLabelMouseClicked(evt);
                }catch (AuthorizationException ignore ){}
            }
        });

        addMemberLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    addMemberLabelMouseClicked(evt);
                }catch (AuthorizationException ignore ){}
            }
        });

        removeBudgetAccessLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    removeBudgetAccessLabelMouseClicked(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        addBudgetAccessLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    addBudgetAccessLabelMouseClicked(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        setBackground(new java.awt.Color(153, 204, 255));
        setMinimumSize(new java.awt.Dimension(387, 327));

        headerLabel.setFont(dd.getHeaderText());
        headerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLabel.setText("Committee Name");
        headerLabel.setPreferredSize(new java.awt.Dimension(200, 25));

        memberList.setFont(new java.awt.Font("Candara", 0, 12)); // NOI18N
        memberList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        memberList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                memberListValueChanged(evt);
            }
        });
        memberScrollPane.setViewportView(memberList);

        membersLabel.setFont(dd.getStandardText());
        membersLabel.setText("Members");

        headLabel.setFont(dd.getHeaderText());
        headLabel.setText("Head: ");

        headNameLabel.setFont(dd.getHeaderText());
        headNameLabel.setText("committee head");

        taskList.setFont(new java.awt.Font("Candara", 0, 12)); // NOI18N
        taskList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        taskList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {

                try{
                    taskListMouseClicked(evt);
                }catch (AuthorizationException authEx){}
            }
        });
        taskScrollPane.setViewportView(taskList);

        tasksLabel.setFont(dd.getStandardText());
        tasksLabel.setText("Tasks");

        taskProgressBar.setOrientation(1);

        budgetButton.setFont(dd.getStandardText());
        budgetButton.setSize(dd.getBigButtonDimension());
        budgetButton.setText("View Budget");
        budgetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    budgetButtonActionPerformed(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        committeeHeadChangeButton.setFont(dd.getStandardText());
        committeeHeadChangeButton.setSize(dd.getBigButtonDimension());
        committeeHeadChangeButton.setText("change");
        committeeHeadChangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    committeeHeadChangeButtonActionPerformed(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        removeTaskButton.setFont(dd.getSmallText());
        removeTaskButton.setSize(dd.getSmallButtonDimension());
        removeTaskButton.setText("Remove Task");
        removeTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    removeTaskButtonActionPerformed(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        addTaskButton.setFont(dd.getSmallText());
        addTaskButton.setSize(dd.getSmallButtonDimension());
        addTaskButton.setText("Add Task");
        addTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    addTaskButtonActionPerformed(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        addMemberButton.setFont(dd.getSmallText());
        addMemberButton.setSize(dd.getSmallButtonDimension());
        addMemberButton.setText("Add Member");
        addMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    addMemberButtonActionPerformed(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        removeMemberButton.setFont(dd.getSmallText());
        removeMemberButton.setSize(dd.getSmallButtonDimension());
        removeMemberButton.setText("Remove Member");
        removeMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    removeMemberButtonActionPerformed(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        addToBudgetButton.setFont(dd.getSmallText());
        addToBudgetButton.setSize(dd.getSmallButtonDimension());
        addToBudgetButton.setText("+ Budget Access");
        addToBudgetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    addToBudgetButtonActionPerformed(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        removeMemberFromBudgetButton.setFont(dd.getSmallText());
        removeMemberFromBudgetButton.setSize(dd.getSmallButtonDimension());
        removeMemberFromBudgetButton.setText("- Budget Access");
        removeMemberFromBudgetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    removeMemberFromBudgetButtonActionPerformed(evt);
                }catch (AuthorizationException authEx){}
            }
        });

        reportButton.setFont(dd.getStandardText());
        reportButton.setMinimumSize(dd.getBigButtonDimension());
        reportButton.setText("View Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(membersLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(memberScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addMemberButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addToBudgetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removeMemberButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(removeMemberFromBudgetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(headLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(committeeHeadChangeButton)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(headNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tasksLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(taskScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(addTaskButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(budgetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(reportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(removeTaskButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(taskProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
            .addComponent(headerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headLabel)
                    .addComponent(headNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(committeeHeadChangeButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(membersLabel)
                    .addComponent(tasksLabel))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(taskProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(taskScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(removeTaskButton)
                            .addComponent(addTaskButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(budgetButton)
                            .addComponent(reportButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(memberScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addMemberButton)
                            .addComponent(removeMemberButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addToBudgetButton)
                            .addComponent(removeMemberFromBudgetButton))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
 
    public void setCommittee(Committee c)
        throws AuthorizationException{
        manager.getCommitteeManager().setSelectedCommittee(c);
        updateInfo();
    }
    
    public void updateInfo()
        throws AuthorizationException{
        Committee c = manager.getCommitteeManager().getSelectedCommittee();
        if(c.getTitle() != null)
        {
            headerLabel.setText(c.getTitle());
        }
        
        headNameLabel.setText(c.getChair().getFirstName() + " " + c.getChair().getLastName());
            
        DefaultListModel tModel = new DefaultListModel();
        DefaultListModel mModel = new DefaultListModel();
        for(User m : c.getMemberListWithChair()){
            mModel.addElement(m);
        }
        for(Task t : c.getTaskList()){
            tModel.addElement(t);
        }
        taskList.setModel(tModel);
        memberList.setModel(mModel);
        taskProgressBar.setValue(manager.getCommitteeManager().getSelectedCommittee().getCompletePercent());
        
    }
    
    private void budgetButtonActionPerformed(java.awt.event.ActionEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_budgetButtonActionPerformed
        // TODO add your handling code here:
        manager.getBudgetManager().setSelectedBudget(manager.getCommitteeManager().getSelectedCommittee().getBudget());
        BudgetDialog bd = new BudgetDialog((JFrame)SwingUtilities.windowForComponent(this), true);
        bd.setVisible(true);
    }//GEN-LAST:event_budgetButtonActionPerformed

    public void addTaskToList(Task t)
        throws AuthorizationException{
                TimeSchedule ts = t.getTimeSchedule();
                User u = manager.getLogInManager().getLoggedInUser();
                Event e = manager.getEventManager().getSelectedEvent();
                Committee c = manager.getCommitteeManager().getSelectedCommittee();
                try
                {
                    manager.getTaskManager().editCompleted(t.getCompleted());
                    manager.getTaskManager().editTitle(t.getTitle());
                    manager.getTaskManager().editDescription(t.getDescription());
                    manager.getTaskManager().editTimeSchedule(ts);
//                    int year = ts.getStartDateTimeCalendar().get(Calendar.YEAR);
//                    int month = ts.getStartDateTimeCalendar().get(Calendar.MONTH)+1;
//                    int day = ts.getStartDateTimeCalendar().get(Calendar.DAY_OF_MONTH);
//                    int hour = ts.getStartDateTimeCalendar().get(Calendar.HOUR);
//                    int minute = ts.getStartDateTimeCalendar().get(Calendar.MINUTE);
//                    manager.getTaskManager().editStartDateTime(year, month, day, hour, minute, u, e, c);
//                    year = ts.getEndDateTimeCalendar().get(Calendar.YEAR);
//                    month = ts.getEndDateTimeCalendar().get(Calendar.MONTH)+1;
//                    day = ts.getEndDateTimeCalendar().get(Calendar.DAY_OF_MONTH);
//                    hour = ts.getEndDateTimeCalendar().get(Calendar.HOUR);
//                    minute = ts.getEndDateTimeCalendar().get(Calendar.MINUTE);  
//                    manager.getTaskManager().editEndDateTime(year, month, day, hour, minute, u, e, c);
                }
                catch (Exception ex)
                {
                    ex.printStackTrace();
                }
    }
    
    private void taskListMouseClicked(java.awt.event.MouseEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_taskListMouseClicked
        // TODO add your handling code here:
        Event selectedEvent = manager.getEventManager().getSelectedEvent();
        Committee selectedCommittee = manager.getCommitteeManager().getSelectedCommittee();
        User loggedInUser = manager.getLogInManager().getLoggedInUser();
        
        if(evt.getClickCount() == 2)
        {
            if (loggedInUser.getPrivilegeLevel().isAdmin() || selectedEvent.getOrganizerList().contains(loggedInUser) ||
                selectedCommittee.getChair().equals(loggedInUser)) {
                manager.getTaskManager().setSelectedTask(manager.getCommitteeManager().getSelectedCommittee().getTaskList().get(taskList.getMaxSelectionIndex()));
                TaskDialog td = new TaskDialog((JFrame) SwingUtilities.windowForComponent(this), true);
                td.setVisible(true);
                if (td.getConfirm()) {
                    //UPDATE ALL TASK INFO
                    addTaskToList(td.createTask());
                }
            }
            else {
                manager.getTaskManager().setSelectedTask(selectedCommittee.getTaskList().get(taskList.getMaxSelectionIndex()));
                TaskDialog td = new TaskDialog((JFrame) SwingUtilities.windowForComponent(this), true);
                td.setToViewOnly();
                td.setVisible(true);
            }
        updateInfo();
        }
        
    }//GEN-LAST:event_taskListMouseClicked

    private void removeMemberButtonActionPerformed(java.awt.event.ActionEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_removeMemberButtonActionPerformed
        User selectedUser = (User) memberList.getSelectedValue();
        
        if (manager.getCommitteeManager().getSelectedCommittee().getChair().equals(selectedUser)) {
            JOptionPane.showMessageDialog(null, "Chair cannot be removed. Please change the chair first and then remove.", "Remove Chair Error", JOptionPane.ERROR_MESSAGE);
        } else if (memberList.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(
                    null, "Please select a member to remove first.", "No Member Selected", JOptionPane.ERROR_MESSAGE);
        } else {
            int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove " + selectedUser.getFirstName() + " " + selectedUser.getLastName() + "?");
            if (choice == JOptionPane.YES_OPTION) {
                try {
                    manager.getCommitteeManager().removeMember(
                            manager.getCommitteeManager().getSelectedCommittee().getMemberList().get(
                            memberList.getSelectedIndex()));
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
        updateInfo();
    }//GEN-LAST:event_removeMemberButtonActionPerformed

    private void removeTaskButtonActionPerformed(java.awt.event.ActionEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_removeTaskButtonActionPerformed

        if (taskList.getSelectedIndex() >= 0) {
            try {
                Task selectedTask = manager.getCommitteeManager().getSelectedCommittee().getTaskList().get(taskList.getSelectedIndex());
                int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove " + selectedTask.getTitle() + "?");
                if (choice == JOptionPane.YES_OPTION) {
                    manager.getCommitteeManager().deleteTask(selectedTask);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        

            /*
             // TODO add your handling code here:    
             if (taskList.getSelectedIndex() >= 0) {
             try {
             Task task = manager.getCommitteeManager().getSelectedCommittee().getTaskList().get(taskList.getSelectedIndex());
             manager.getCommitteeManager().deleteTask(task);
             //manager.getCommitteeManager().getSelectedCommittee().getTaskList().remove(taskList.getSelectedIndex());
             } catch (Exception e)
             {

                
             }
             * */
            updateInfo();
            if (taskList.getModel().getSize() >= 0) {
                taskList.setSelectedIndex(0);
            }
        } else {
            JOptionPane.showMessageDialog(
                    null, "Please select a task to remove first.", "No Task Selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeTaskButtonActionPerformed

    private void addMemberButtonActionPerformed(java.awt.event.ActionEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_addMemberButtonActionPerformed
        // TODO add your handling code here:
        FindMemberDialog fmd = new FindMemberDialog((JFrame)SwingUtilities.windowForComponent(this), true);
        fmd.setVisible(true);
        if(fmd.getConfirm())
        {
            User u = fmd.createUser();
            if(manager.getCommitteeManager().getSelectedCommittee().getMemberListWithChair().contains(u))
            {
                JOptionPane.showMessageDialog(null, "User already exists in member list.");
            }
            else
            {
                try
                {
                    manager.getCommitteeManager().addMember(u);
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
       }
        updateInfo();
    }//GEN-LAST:event_addMemberButtonActionPerformed

    private void addTaskButtonActionPerformed(java.awt.event.ActionEvent evt)
    throws AuthorizationException{//GEN-FIRST:event_addTaskButtonActionPerformed
        // TODO add your handling code here:
        NewTaskDialog ntd = new NewTaskDialog((JFrame)SwingUtilities.windowForComponent(this), true);
        ntd.setVisible(true);
        if(ntd.getConfirm())
        {
            try
            {
                Task t = ntd.createTask();
                User u = manager.getLogInManager().getLoggedInUser();
                Event e = manager.getEventManager().getSelectedEvent();
                Committee c = manager.getCommitteeManager().getSelectedCommittee();
                manager.getTaskManager().setSelectedTask(manager.getCommitteeManager().createTask(t));
                manager.getTaskManager().editTitle(t.getTitle());
                manager.getTaskManager().editCompleted(t.getCompleted());
                manager.getTaskManager().editDescription(t.getDescription());
                manager.getTaskManager().addResponsible(u);
                    TimeSchedule ts = t.getTimeSchedule();
                    int year = ts.getStartDateTimeCalendar().get(Calendar.YEAR);
                    int month = ts.getStartDateTimeCalendar().get(Calendar.MONTH)+1;
                    int day = ts.getStartDateTimeCalendar().get(Calendar.DAY_OF_MONTH);
                    int hour = ts.getStartDateTimeCalendar().get(Calendar.HOUR);
                    int minute = ts.getStartDateTimeCalendar().get(Calendar.MINUTE);
                    manager.getTaskManager().editStartDateTime(year, month, day, hour, minute);
                    year = ts.getEndDateTimeCalendar().get(Calendar.YEAR);
                    month = ts.getEndDateTimeCalendar().get(Calendar.MONTH)+1;
                    day = ts.getEndDateTimeCalendar().get(Calendar.DAY_OF_MONTH);
                    hour = ts.getEndDateTimeCalendar().get(Calendar.HOUR);
                    minute = ts.getEndDateTimeCalendar().get(Calendar.MINUTE);  
                    manager.getTaskManager().editEndDateTime(year, month, day, hour, minute);                
            }
            catch (Exception e)
            {
                System.out.println("Error in adding task to committee.");
                e.printStackTrace();
            }
        }
        updateInfo();
    }//GEN-LAST:event_addTaskButtonActionPerformed

    private void committeeHeadChangeButtonActionPerformed(java.awt.event.ActionEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_committeeHeadChangeButtonActionPerformed
        // TODO add your handling code here:
        FindMemberDialog fmd = new FindMemberDialog((JFrame)SwingUtilities.windowForComponent(this), true);
        fmd.setVisible(true);
        if(fmd.getConfirm())
        {
            try
            {
            manager.getCommitteeManager().editChair(fmd.createUser());
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
        updateInfo();
    }//GEN-LAST:event_committeeHeadChangeButtonActionPerformed

    private void addToBudgetButtonActionPerformed(java.awt.event.ActionEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_addToBudgetButtonActionPerformed
        // TODO add your handling code here:
        if(memberList.getSelectedIndex() >= 0)
        {
            try
            {
                manager.getCommitteeManager().addBudgetAccess(
                     manager.getUserManager().getSelectedUser());
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            updateInfo();
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please select a member first.", "No Member Selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addToBudgetButtonActionPerformed

    private void memberListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_memberListValueChanged
        // TODO add your handling code here:
        if(memberList.getSelectedValue() instanceof User)
        {
            User u = (User)memberList.getSelectedValue();
            manager.getUserManager().setSelectedUser(u);
        }
    }//GEN-LAST:event_memberListValueChanged

    private void removeMemberFromBudgetButtonActionPerformed(java.awt.event.ActionEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_removeMemberFromBudgetButtonActionPerformed
        // TODO add your handling code here:
        User selectedUser = (User) memberList.getSelectedValue();

        if (memberList.getSelectedIndex() >= 0) {
            try {
                int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove " + selectedUser.getFirstName() + " " + selectedUser.getLastName() + "?");
                if (choice == JOptionPane.YES_OPTION) {
                    manager.getCommitteeManager().removeBudgetAccess(
                            manager.getUserManager().getSelectedUser());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            updateInfo();
        } else {
            JOptionPane.showMessageDialog(
                    null, "Please select a member to remove from the budget-access list first.", "No Member Selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeMemberFromBudgetButtonActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        FindMemberDialog fmd = new FindMemberDialog((JFrame)SwingUtilities.windowForComponent(this), true);
        fmd.setVisible(true);
        if(fmd.getConfirm())
        {
            try
            {
            manager.getCommitteeManager().editChair(fmd.createUser());
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
        updateInfo();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void addMemberLabelMouseClicked(java.awt.event.MouseEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_addMemberLabelMouseClicked
        // TODO add your handling code here:
        FindMemberDialog fmd = new FindMemberDialog((JFrame)SwingUtilities.windowForComponent(this), true);
        fmd.setVisible(true);
        if(fmd.getConfirm())
        {
            User u = fmd.createUser();
            if(manager.getCommitteeManager().getSelectedCommittee().getMemberListWithChair().contains(u))
            {
                JOptionPane.showMessageDialog(null, "User already exists in member list.");
            }
            else
            {
                try
                {
                    manager.getCommitteeManager().addMember(u);
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
       }
        updateInfo();
    }//GEN-LAST:event_addMemberLabelMouseClicked

    private void removeMemberLabelMouseClicked(java.awt.event.MouseEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_removeMemberLabelMouseClicked
        // TODO add your handling code here:
        if(manager.getCommitteeManager().getSelectedCommittee().getChair().equals((User)memberList.getSelectedValue())) 
        {
            JOptionPane.showMessageDialog(null, "Chair cannot be removed. Please change the chair first and then remove.", "Remove Chair Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(memberList.getSelectedIndex() < 0)
        {
            JOptionPane.showMessageDialog(
                    null, "Please select a member to remove first.", "No Member Selected", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            try
            {
                manager.getCommitteeManager().removeMember(
                        manager.getCommitteeManager().getSelectedCommittee().getMemberList().get(
                        memberList.getSelectedIndex()));
            }
            catch (Exception e)
            {
                System.out.println(e);
            }
        }
        updateInfo();

    }//GEN-LAST:event_removeMemberLabelMouseClicked

    private void addTaskLabelMouseClicked(java.awt.event.MouseEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_addTaskLabelMouseClicked
        // TODO add your handling code here:
           NewTaskDialog ntd = new NewTaskDialog((JFrame)SwingUtilities.windowForComponent(this), true);
        ntd.setVisible(true);
        if(ntd.getConfirm())
        {
            try
            {
                Task t = ntd.createTask();
                User u = manager.getLogInManager().getLoggedInUser();
                Event e = manager.getEventManager().getSelectedEvent();
                Committee c = manager.getCommitteeManager().getSelectedCommittee();
                manager.getTaskManager().setSelectedTask(manager.getCommitteeManager().createTask(t));
                manager.getTaskManager().editTitle(t.getTitle());
                manager.getTaskManager().editCompleted(t.getCompleted());
                manager.getTaskManager().editDescription(t.getDescription());
                manager.getTaskManager().addResponsible(u);
                    TimeSchedule ts = t.getTimeSchedule();
                    int year = ts.getStartDateTimeCalendar().get(Calendar.YEAR);
                    int month = ts.getStartDateTimeCalendar().get(Calendar.MONTH)+1;
                    int day = ts.getStartDateTimeCalendar().get(Calendar.DAY_OF_MONTH);
                    int hour = ts.getStartDateTimeCalendar().get(Calendar.HOUR);
                    int minute = ts.getStartDateTimeCalendar().get(Calendar.MINUTE);
                    manager.getTaskManager().editStartDateTime(year, month, day, hour, minute);
                    year = ts.getEndDateTimeCalendar().get(Calendar.YEAR);
                    month = ts.getEndDateTimeCalendar().get(Calendar.MONTH)+1;
                    day = ts.getEndDateTimeCalendar().get(Calendar.DAY_OF_MONTH);
                    hour = ts.getEndDateTimeCalendar().get(Calendar.HOUR);
                    minute = ts.getEndDateTimeCalendar().get(Calendar.MINUTE);  
                    manager.getTaskManager().editEndDateTime(year, month, day, hour, minute);                
            }
            catch (Exception e)
            {
                System.out.println("Error in adding task to committee.");
                e.printStackTrace();
            }
        }
        updateInfo();
    }//GEN-LAST:event_addTaskLabelMouseClicked

    private void removeTaskLabelMouseClicked(java.awt.event.MouseEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_removeTaskLabelMouseClicked
        // TODO add your handling code here:
        if(taskList.getSelectedIndex() >= 0)
        {
            try
            {
                manager.getCommitteeManager().getSelectedCommittee().getTaskList().remove(taskList.getSelectedIndex());
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            updateInfo();
            if(taskList.getModel().getSize() >= 0)
            {
                taskList.setSelectedIndex(0);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(
                    null, "Please select a task to remove first.", "No Task Selected", JOptionPane.ERROR_MESSAGE);  
        }
    }//GEN-LAST:event_removeTaskLabelMouseClicked

    private void removeBudgetAccessLabelMouseClicked(java.awt.event.MouseEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_removeBudgetAccessLabelMouseClicked
        // TODO add your handling code here:
        if(memberList.getSelectedIndex() >= 0)
        {
            try
            {
                manager.getCommitteeManager().removeBudgetAccess(
                        manager.getUserManager().getSelectedUser());
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            updateInfo();
        }
        else
        {
            JOptionPane.showMessageDialog(
                    null, "Please select a member to remove from the budget-access list first.", "No Member Selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removeBudgetAccessLabelMouseClicked

    private void addBudgetAccessLabelMouseClicked(java.awt.event.MouseEvent evt)
        throws AuthorizationException{//GEN-FIRST:event_addBudgetAccessLabelMouseClicked
        // TODO add your handling code here:
        if(memberList.getSelectedIndex() >= 0)
        {
            try
            {
                manager.getCommitteeManager().addBudgetAccess(
                     manager.getUserManager().getSelectedUser());
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            updateInfo();
        }
        else
        {
            JOptionPane.showMessageDialog(
                    null, "Please select a member first.", "No Member Selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addBudgetAccessLabelMouseClicked

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        // TODO add your handling code here:
        CommitteeReport cd = new CommitteeReport(null,true);
        cd.setVisible(true);
    }//GEN-LAST:event_reportButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addBudgetAccessLabel;
    private javax.swing.JButton addMemberButton;
    private javax.swing.JLabel addMemberLabel;
    private javax.swing.JButton addTaskButton;
    private javax.swing.JLabel addTaskLabel;
    private javax.swing.JButton addToBudgetButton;
    private javax.swing.JButton budgetButton;
    private javax.swing.JButton committeeHeadChangeButton;
    private javax.swing.JLabel headLabel;
    private javax.swing.JLabel headNameLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList memberList;
    private javax.swing.JScrollPane memberScrollPane;
    private javax.swing.JLabel membersLabel;
    private javax.swing.JLabel removeBudgetAccessLabel;
    private javax.swing.JButton removeMemberButton;
    private javax.swing.JButton removeMemberFromBudgetButton;
    private javax.swing.JLabel removeMemberLabel;
    private javax.swing.JButton removeTaskButton;
    private javax.swing.JLabel removeTaskLabel;
    private javax.swing.JButton reportButton;
    private javax.swing.JList taskList;
    private javax.swing.JProgressBar taskProgressBar;
    private javax.swing.JScrollPane taskScrollPane;
    private javax.swing.JLabel tasksLabel;
    // End of variables declaration//GEN-END:variables

    
 /****************************************************************
  * 
  * List Renderers.
  * 
  ****************************************************************/
    class MembersCellRenderer extends JLabel implements ListCellRenderer {
         public MembersCellRenderer() {
            setOpaque(true);
         }
          public Component getListCellRendererComponent(JList list,
                                                   Object value,
                                                   int index,
                                                   boolean isSelected,
                                                   boolean cellHasFocus)
          {
              this.setFont(dd.getStandardText());
              if(value instanceof User) {
                  User u = (User) value;
                  try {
                      if (manager.getCommitteeManager().getSelectedCommittee().getChair().equals(u)) {
                          setText(u.toString() + "(C)");
                          setBackground(Color.GREEN);
                      } else if (manager.getCommitteeManager().getSelectedCommittee().getBudgetAccessList().contains(u)) {
                          setText(u.toString() + "*");
                          setBackground(Color.ORANGE);
                      } else {
                          setText(u.toString());
                          setBackground(Color.WHITE);
                      }
                      if (isSelected) {
                          setBackground(dd.getListSelectionColor());
                      }
                  } catch (AuthorizationException authEx) {
                  }
              }
              return this;
          }
          
    }

    class TasksCellRenderer extends JLabel implements ListCellRenderer {
         public TasksCellRenderer() 
         {
            setOpaque(true);
         }
          public Component getListCellRendererComponent(JList list,
                                                   Object value,
                                                   int index,
                                                   boolean isSelected,
                                                   boolean cellHasFocus) 
          {
              this.setFont(dd.getStandardText());
              if(value instanceof Task)
              {
                Task t = (Task)value;
                  try{
                if(t.getCompleted())
                {
                     setText(t.toString());
                     setBackground(new Color(128,255,128));
                }
                else
                {
                     setText(t.toString());
                     setBackground(new Color(255,128,128));
                }
                if(isSelected)
                {
                     setBackground(dd.getListSelectionColor());
                }
              }catch (AuthorizationException authEx){}}
              return this;
          }
          
    }

}
